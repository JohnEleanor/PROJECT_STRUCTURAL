using namespace std;

/**
 * @brief Part of J Code
 *? @function main_menu() ‡πÄ‡πÄ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
 *? @function room_menu() ‡πÄ‡πÄ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á
 *? @function user_menu() ‡πÄ‡πÄ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
 *? @function CheckUser_Haved() ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î return true
 *? @function Insert_User() ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
 *? @function Edit_User() ‡πÄ‡πÄ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
 *? @function Delete_User() ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
*/


void alert(string text){
    system("CLS");
    cout << setfill('=') << setw(55) << "=" << endl;
    cout << setfill(' ') << setw(35);
    cout << text << endl;
    cout << setfill('=') << setw(55) << "=" << endl;
    cout << "Press Any key to Continue... ";
    getch();
}

/*
    [üß†] ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
    [üìÇ] ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö : ‡πÄ‡πÄ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
*/
void main_menu()
{
    system("CLS");

    cout << setfill('=') << setw(55) << "=" << endl;
    cout << setfill(' ') << setw(25);
    cout << "Welcome" << endl;
    cout << setfill('=') << setw(55) << "=" << endl;
    cout << "[1] Room management \n";
    cout << "[2] User management \n";
    cout << "[0] EXIT Program \n";
    cout << "===================\n";
    cout << "[+] Plase Enter Your Choice : ";
}

/*
    [üß†] ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á
    [üìÇ] ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö : ‡πÄ‡πÄ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
*/
void room_menu()
{
    // system("CLS");
    // cout << "===== Room management =====\n";
    system("CLS");
    cout << setfill('=') << setw(55) << "=" << endl;
    cout << setfill(' ') << setw(35);
    cout << "Room management" << endl;
    cout << setfill('=') << setw(55) << "=" << endl;
    cout << "[1] Create Room \n";
    cout << "[2] Edit Room \n";
    cout << "[3] Delete Room \n";
    cout << "[9] Exit Menu \n";
    cout << "[0] Exit Program \n";
    cout << "===================\n";
    cout << "[+] Plase Enter Your Choice : ";
}

/*
    [üß†] ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    [üìÇ] ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö : ‡πÄ‡πÄ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
*/
void user_menu()
{
    system("CLS");
    cout << setfill('=') << setw(55) << "=" << endl;
    cout << setfill(' ') << setw(35);
    cout << "User management" << endl;
    cout << setfill('=') << setw(55) << "=" << endl;
    cout << "[1] Add User \n";
    cout << "[2] Edit User \n";
    cout << "[3] Delete User \n";
    cout << "[9] Exit Menu \n";
    cout << "[0] Exit Program \n";
    cout << setfill('=') << setw(55) << "=" << endl;
    cout << "[+] Plase Enter Your Choice : ";
}

/*
    [üß†] ‡πÄ‡∏ä‡πá‡∏≠‡∏Å‡∏≤‡∏£ Login
    [üìÇ] ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö : ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Login
*/
bool CheckUser(ifstream &InFile, string param_username, string param_password)
{

    string username, pass;

    while (InFile >> username >> pass)
    {
        
        if (param_username != username)
        {
            cout << "user not correct .. " << endl;
            
        }else if (param_password != pass) 
        {
            cout << "user not correct .. " << endl;
            
        }else {

            cout << "every thing goods ..";
            return true;
        }
        
    }

    return false;
}

/*
    [üß†] ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    [üìÇ] ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö : ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á input ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    [üéÉ] ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà return (ture)
*/
bool CheckUser_Haved(ifstream &InFile, string Check_user, string Check_password)
{

    bool dataExists = false;
    string line;
    string input_user_password;

    input_user_password = Check_user + " " + Check_password;

    while (getline(InFile, line))
    {
        if (line == input_user_password)
        {
            dataExists = true;
            break;
        }
    }

    return dataExists;
}

bool Check_Room(ifstream &InFile ,string RoomNo)
{

    bool dataExists = false;
    string line;
    string File_RoomNo, File_roomBooking_Day, Room_pricePer_Day, Room_CustomerName, Room_CustomerPhone;

    while (InFile >> File_RoomNo >>File_roomBooking_Day >> Room_pricePer_Day >>  Room_CustomerName >>  Room_CustomerPhone)
    {
        if (File_RoomNo == RoomNo)
        {
            dataExists = true;
            break;
        }
    }

    return dataExists;
}


/*
    [üß†] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡∏á‡∏≤‡∏ô
    [üìÇ] ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö : ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
*/
bool User_insert(ifstream &InFile,const string Filename)
{

    system("CLS");
    fstream fileInOut(Filename.c_str(), ios::in | ios::out);
    string Name, Password;
    bool CheckAlready_user;
    cout << setfill('=') << setw(55) << "=" << endl;
    cout << setfill(' ') << setw(35);
    cout << "User Add Function" << endl;
    cout << setfill('=') << setw(55) << "=" << endl;

    cout << "[+] Plase Enter Your (New username) : ";
    cin >> Name;
    cout << "[+] Plase Enter Your (New Password) : ";
    cin >> Password;

    CheckAlready_user = CheckUser(InFile, Name, Password);

    if (CheckAlready_user == false)
    {
        ofstream fileOut(Filename.c_str(), ios_base::app);
        fileOut << Name << " " << Password << endl;
        fileOut.close();
        return (true);
    }

    return (false);
}

/*
    [üß†] ‡πÄ‡πÄ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    [üìÇ] ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö : ‡πÄ‡πÄ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
*/
bool User_Edit(ifstream &InFile, const string Filename)
{
    system("CLS");
    string old_username, old_password, username, password;
    bool Check_status;
    cout << setfill('=') << setw(55) << "=" << endl;
    cout << setfill(' ') << setw(35);
    cout << "User Edit Function" << endl;
    cout << setfill('=') << setw(55) << "=" << endl;
    cout << "[+] Enter Your old user name : ";
    cin >> old_username;
    cout << "[+] Enter Your old password name : ";
    cin >> old_password;

    Check_status = CheckUser_Haved(InFile, old_username, old_password);
    InFile.close(); // ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÉ‡∏ä‡πâ fstream fileInOut(Filename.c_str(), ios::in | ios::out); ‡∏°‡∏±‡πà‡∏ß‡∏ó‡∏£‡∏á
    
    if (Check_status == true) // ‡∏ñ‡πâ‡∏≤ input ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á ‡∏à‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡πÄ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ
    {

        // Do this
        string Confirm;
        do
        {
            cout << "Are you sure you want to Edit (Y/n) : ";
            cin >> Confirm;

            if (Confirm == "Y" || Confirm == "y")
            {
      
                system("CLS");
                cout << setfill('=') << setw(55) << "=" << endl;
                cout << setfill(' ') << setw(35);
                cout << "Edit Mode ;)" << endl;
                cout << setfill('=') << setw(55) << "=" << endl;
                cout << "[+] Plase Enter Your New Username : ";
                cin >> username;
                cout << "[+] Plase Enter Your New Password : ";
                cin >> password;

                fstream fileInOut(Filename.c_str(), ios::in | ios::out);
                ofstream tempFile("temp.txt");
                string userToEdit = old_username + " " + old_password;
                string newUsertoEdit = username + " " + password;
                string line;

        /**
            * @param line ‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏°‡∏≤‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .txt
            * @param fileInOut ‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå
        */

                 while (getline(fileInOut, line))
                {
                    if (line != userToEdit)
                    {
                        tempFile << line << endl;
                    }
                    
                }

                tempFile << newUsertoEdit << endl;

                fileInOut.close();
                tempFile.close();

                remove(Filename.c_str());

                rename("temp.txt", Filename.c_str());
                return true;
            }
            else
            {
                alert("[!] Action was canceled.");
                return false;
            }
        } while (Confirm == "Y" || Confirm == "y");
    }
    else
    {
        cout << endl << "Can not find your input ;( .. ";
    }
    return false;
}

/*
    [üß†] ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    [üìÇ] ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö : ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
*/
bool User_Delete(ifstream &InFile, const string Filename)
{
    system("CLS");
    string username, password;
    string read_username, read_password;
    bool check_status;
    cout << setfill('=') << setw(55) << "=" << endl;
    cout << setfill(' ') << setw(35);
    cout << "User Delete Function" << endl;
    cout << setfill('=') << setw(55) << "=" << endl;
    cout << "Plase Enter Your Name You Want to Delete : ";
    cin >> username;
    cout << "Confirm Your password : ";
    cin >> password;

    check_status = CheckUser_Haved(InFile, username, password);
    InFile.close(); // ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÉ‡∏ä‡πâ fstream fileInOut(Filename.c_str(), ios::in | ios::out); ‡∏°‡∏±‡πà‡∏ß‡∏ó‡∏£‡∏á

    if (check_status == true)
    {
        string confirm;

        do
        {
            cout << "Are you sure you want to delete (Y/n) : ";
            cin >> confirm;

            if (confirm == "Y" || confirm == "y")
            {
                string line;
                string userToDelete = username + " " + password;
                fstream fileInOut(Filename.c_str(), ios::in | ios::out);
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡πÄ‡∏•‡πâ‡∏ß copy ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
                ofstream tempFile("temp.txt");

                while (getline(fileInOut, line))
                {
                    if (line != userToDelete)
                    {
                        tempFile << line << endl;
                    }
                }

                fileInOut.close();
                tempFile.close();

                // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤
                remove("user.txt");
                //! ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ [Debug]
                // cout << "Delete Old file.. " << endl;
                // getch();

                // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå temp.txt ‡πÄ‡∏õ‡πá‡∏ô user.txt ‡∏≠‡∏¥‡∏≠‡∏¥ üò¥
                rename("temp.txt", Filename.c_str());

                return true;
            } else
            {
                alert("[+] Deletion canceled.");
                return false;
            }
         

        } while (confirm == "Y");
    }
    else
    {
        alert("[+] Can not find your username ");
    }

    return false;
}




bool Room_Create(ifstream &InFile, const string Filename)
{
    system("CLS");
    string roomNo, CustomerName, CustomerPhone;
    double roomBooking_Day, pricePer_Day;
    bool CheckRoomStatus;
    cout << setfill('=') << setw(55) << "=" << endl;
    cout << setfill(' ') << setw(35);
    cout << "Room Create" << endl;
    cout << setfill('=') << setw(55) << "=" << endl;
    cout << "[+] Enter Your Room Number : ";
    cin >> roomNo;
    cout << "[+] Enter Your Room Booking Day : ";
    cin >> roomBooking_Day;
    cout << "[+] Enter Your Price/Day : ";
    cin >> pricePer_Day;
    cout << "[+] Enter Your Customer Name : ";
    cin >> CustomerName;
    cout << "[+] Enter Your Customer Phone Number : ";
    cin >> CustomerPhone;

    InFile.open(Filename.c_str()); //! ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡πÄ‡∏•‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ
    CheckRoomStatus = Check_Room(InFile, roomNo );

    if (CheckRoomStatus == false){
        ofstream fileOut(Filename.c_str(), ios_base::app);
        fileOut << roomNo << " " << roomBooking_Day << " " << pricePer_Day << " " << CustomerName << " " << CustomerPhone << endl;
        fileOut.close();
        return (true);
    }else{
        cout << "[ERROR] Can not Write File ." << endl;
        return (false);
    }
    

}



bool Room_Edit(ifstream &InFile, const string Filename)
{
    system("CLS");
    string roomNo, CustomerName, CustomerPhone;
    double roomBooking_Day, pricePer_Day;
    cout << setfill('=') << setw(55) << "=" << endl;
    cout << setfill(' ') << setw(35);
    cout << "Room Create" << endl;
    cout << setfill('=') << setw(55) << "=" << endl;
    cout << "[+] Enter Your Room Number : ";
    cin >> roomNo;
    cout << "[+] Enter Your Room Booking Day : ";
    cin >> roomBooking_Day;
    cout << "[+] Enter Your Price/Day : ";
    cin >> pricePer_Day;
    cout << "[+] Enter Your Customer Name : ";
    cin >> CustomerName;
    cout << "[+] Enter Your Customer Phone Number : ";
    cin >> CustomerPhone;



    cout << "=========" << endl;
    cout << "Room Number : " << roomNo << endl;
    cout << "Customer : " << CustomerName << endl;
    cout << "Customer Phone Number : " << CustomerPhone << endl;
    cout << "Booking Room (Day) " << roomBooking_Day <<  endl;
    cout << "Price (perDay) : " << pricePer_Day << endl;
    cout << "Total Price / Day  : " << roomBooking_Day * pricePer_Day  << endl;
    getch();
    return (false);
}


/**
 * @brief ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠‡∏•‡∏ö‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á ‡πÇ‡∏î‡∏¢ ‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô 
 * 
*/

bool Room_Delete(ifstream &InFile, const string Filename)
{
    system("CLS");
    string roomNo;
    bool CheckRoomStatus;
   
    cout << setfill('=') << setw(55) << "=" << endl;
    cout << setfill(' ') << setw(35);
    cout << "Delete Mode ;)" << endl;
    cout << setfill('=') << setw(55) << "=" << endl;
    cout << "[-] Enter Your Room Number To Delete : ";
    cin >> roomNo;

    CheckRoomStatus = Check_Room(InFile, roomNo);
    InFile.close();

    if (CheckRoomStatus == false) // false ‡πÄ‡πÄ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡∏°‡∏µ
    {
        string File_RoomNo, File_roomBooking_Day, Room_pricePer_Day, Room_CustomerName, Room_CustomerPhone;
        string line;
        fstream fileInOut(Filename.c_str(), ios::in | ios::out);
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡πÄ‡∏•‡πâ‡∏ß copy ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
        ofstream tempFile("temp.txt");
        
        while (fileInOut >> File_RoomNo >> File_roomBooking_Day >> Room_pricePer_Day >>  Room_CustomerName >>  Room_CustomerPhone)
        {
            string concatenate_room = File_RoomNo + " " + File_roomBooking_Day + " " + Room_pricePer_Day + " " + Room_CustomerName + " " +Room_CustomerPhone;

            if (File_RoomNo != roomNo) //‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡πá‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏õ (‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà) üò¥
            {
                tempFile << concatenate_room << endl;
            }
        }


        fileInOut.close();
        tempFile.close();

        // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤
        remove("room.txt");
        //! ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ [Debug]
        // cout << "Delete Old file.. " << endl;
        // getch();

        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå temp.txt ‡πÄ‡∏õ‡πá‡∏ô user.txt ‡∏≠‡∏¥‡∏≠‡∏¥ üò¥
        rename("temp.txt", Filename.c_str());
        return (true);
    }

    return (false);
}